Usage
=====
Graphical User interface
------------------------
A graphical user interface has been developped for both the execution of experiments/hardware control and seperately the initialization of data analysis. In the current state, new user groups will need to edit some source code to utilize the GUI version of packagename, unless identical hardware is equipped. By exactly matching class methods, a great deal of code editting can be avoided by simply redefining what equipment is imported to the GUI module. See :ref:`Areas for Future Development <future>` for additional details on making code changes.

Scripting
---------
The entire packages was initial designed with scripted interfacing in mind. All available tools can be accessed in this way, and the interested user will likely find scripted control easier to integrate with new hardware than changing the GUI's source code to accomadate new equipment.

How it works
============
.. figure:: _static/images/code_overview.png
    :width: 800

This is going to be the section about how the code actually does things.


Equipment Specific Guides:
==========================
The purpose of this section is to demonstrate the connection process for specific pieces of equipment. This is less so a tutorial on how to use different code interfaces, and more about how we connect to the hardware in the first place. This section will describe the required python packages, external software, and source code edits necessary to connect to instruments in the first place. In nearly every circumstance, this initial connection is then wrapped by a new python class which provides slightly more convenient functions that can then interface with the rest of the package. As an example, we connect to the Watlow heater using the Watlow class from pywatlow. This class has a function to set temperature "Watlow.write()". We further create the :class:`~photoreactor.equipment.harrick_watlow.heater_control.Heater` to wrap over this and use Heater.ramp() to set temperatures instead which has advantages of checking we don't go over a user defined maximum temperature, ramping the setpoint instead of heating immediatly, and others convenience options. Inside of Heater.ramp(), we eventually still use Watlow.write()! To continue with the analogy, this section is then meant to describe Watlow.write() and the examples section will describe Heater.ramp().

.. figure:: _static/images/equipment_connections.svg
    :width: 800

    An overview of the connections used in the D-Lab system setup. Text in green indicates an installable python package, blue represents external programs, and black is hardware.

.. Warning::
    The following sections describing programatically interfacing with potentially dangerous equipment. This needs to be done carefully! Start with small tests of your equipment with some manual safety precautions in place (i.e.block laser beams, know where physical power switches are for heaters, know where the off valves for gas supply lines are).

.. toctree:: 

    equipment_guides

Data Analysis:
==============
We have a subpackage dedicated to performing data analysis

.. toctree:: 

    data_analysis

Auxiliary tools:
================
We also have other stuff!

.. toctree:: 

    auxiliary_tools 
